asaf693
208109587

10.2.4.1 Classes in the Package.
Tree:
This class is responsible for creating and managing an individual tree.
It creates different components of a tree:
Wood Blocks: A vertical line of blocks forming the trunk.
Leaves: A grid of leaf blocks positioned at the top of the tree.
Fruits: Fruits randomly placed on the leaves.
It handles animations for the leaves (e.g., oscillations in angle and width to simulate wind effects).

Flora:
This class manages a collection of trees in a given range.
It generates trees based on a random seed to ensure reproducibility.
It handles adding trees to the game world, maintaining trees within a range, and removing trees outside
the range to optimize memory usage.

Fruit:
Represents an individual fruit block.
Handles interactions with the avatar, such as collecting the fruit.
Includes logic for making fruits disappear when collected and reappear after a set duration using
a ScheduledTask.


10.2.4.2 Relationships Between Classes.
Tree and Flora:
Flora acts as the manager of multiple Tree instances. It decides where trees should be created, added,
or removed based on the game world state.
Tree focuses on the detailed construction and behavior of individual trees.

Tree and Fruit:
Tree generates Fruit objects as part of its structure.
Fruit handles specific behaviors like interacting with the avatar and reappearing after a delay.

Tree and Leaf Animations:
Leaves created by the Tree class are animated using ScheduledTask and Transition to simulate natural
movements like swaying in the wind.


10.2.4.3 Use of Design Patterns.
Factory Pattern:
The Tree class acts as a factory for its components (wood blocks, leaves, and fruits). Each component is
created within specific helper methods like createWoodBlocks and createLeaves.

Observer Pattern (Implicit):
Using ScheduledTask for delayed tasks and Transition for animations ensures that each block (leaf or fruit)
responds independently to timed events. This is similar to the observer pattern in behavior.

Random Seed for Reproducibility:
A deterministic approach to randomness using a seed ensures that the placement of trees, leaves, and fruits
is consistent. This approach can be seen as part of a State pattern, where the seed determines the state
of the random generator, ensuring consistency when recreating a range.

Single Responsibility Principle:
Each class has a clear responsibility:
Tree focuses on creating and animating tree components.
Flora manages the lifecycle of multiple trees.
Fruit handles fruit-specific interactions.

Decorator Pattern for Animations:
The use of Transition acts as a decorator for leaves, adding oscillatory behaviors to their rendering
and dimensions. This encapsulates the animation logic without altering the underlying leaf objects.